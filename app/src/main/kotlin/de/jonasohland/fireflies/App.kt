/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.jonasohland.fireflies

import processing.core.PApplet
import processing.event.MouseEvent

class App : PApplet() {

    override fun settings() {
        size(1280, 720);
    }

    override fun setup() {
        colorMode(RGB, 255F, 255F, 255F, 1F)
    }

    override fun draw() {
        blinkCycle += 2F
        if (blinkCycle > 50)
            blinkCycle = 0F

        background(0F);

        agents = agents
            .map {
                randomizeDirection(it, 0.6F)
            }
            .map {
                move(it, Rect(0F, 0F, width.toFloat(), height.toFloat()))
            }
            .map {
                sync(it, agents, this)
            }

        agents
            .forEach {
                it drawTo this
            }

        fill(100F, 100F, 100F, 1F)
        text("$blinkCycle", 20F, 20F)

        for ((index, agent) in agents.withIndex()) {
            text("$index: ${agent.blinkCycle}", 20F, 20F + (12F * (index + 1)))
        }
    }

    override fun mouseClicked(event: MouseEvent?) {
        agents = event?.let {
            agents.plus(Agent(Vect2D(it.x.toFloat(), it.y.toFloat()), Vect2D(0.2F, 0.2F), random(50F)))
        } ?: agents
    }

    var blinkCycle = 0F
    private var agents = listOf<Agent>()
}

fun main() {
    PApplet.main(App::class.java);
}
